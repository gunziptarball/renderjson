[tool.poetry]
name = "renderjson"
version = "0.1.0"
description = "CLI to render Jinja2 template.  There are almost certainly many like it, but this one is mine!"
authors = ["Jackson Gilman <jackson.j.gilman@gmail.com>"]
license = "MIT"

[tool.poetry.dependencies]
python = "^3.8"
typer = "^0.4.1"
Jinja2 = "^3.1.1"
hvac = "^0.11.2"
marshmallow = "^3.16.0"
jsonschema = "^4.6.0"

[tool.poetry.dev-dependencies]
pytest = "~=6.0"
pytest-mock = "^3.7.0"
pytest-coverage = "^0.0"
tabulate = "^0.8.10"
mypy = "^0.961"
PyYAML = "^6.0"
PyHamcrest = "^2.0.3"
types-Jinja2 = "^2.11.9"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
addopts = ["--tb=short", "--cov", "renderjson", "--cov-report", "term-missing", "--cov-fail-under", "100", "--doctest-modules"]
testpaths = ["tests", "renderjson"]

[tool.mypy]
files = ["renderjson"]

[[tool.mypy.overrides]]
module = "hvac"
ignore_missing_imports = true


[tool.coverage.report]
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod"
]

[tool.poetry.scripts]
renderjson = "renderjson.main:app"
